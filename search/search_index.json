{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ODBC-GAN: An integrated GAN model for outlier detection and batch correction in multi-sample and multi-modal transcriptomics","text":"<p>We propose a Generative Adversarial Networks called ODBC-GAN  (Outlier Detection and Batch Correction GAN), which can detect different types of outlier observations (cells or spots), detect the subtypes of outliers further, and correct batch effects among multi-sample datasets. ODBC-GAN has two main modes (SC and SRT), which can be suitable for single-cell or spatially resolved transcriptomics dataset. ODBC-GAN in SC mode can solve these problem by gene expression of cells, and SRT mode combines gene expression, position information, and slice image of spots.</p> <p></p> <p></p>"},{"location":"#applicable-tasks","title":"Applicable tasks","text":""},{"location":"#outlier-detection","title":"Outlier detection","text":"<ul> <li>Detect outlier cells on single-cell datasets.</li> <li>Classify subtypes of the outlier cells.</li> <li>Detect outlier spots on spatial transcriptomics datasets.</li> <li>Classify subtypes of the outlier spots.</li> </ul>"},{"location":"#batch-correction","title":"Batch correction","text":"<ul> <li>Correct the batch effects among single-cell datasets.</li> <li>Correct the batch effects among vertical slice spatial transcriptomics datasets.</li> <li>Correct the batch effects among horizontal slice spatial transcriptomics datasets.</li> </ul>"},{"location":"#advantages","title":"Advantages","text":"<ul> <li>Superior performance.</li> <li>Integrated outlier detection and batch correction in multi-sample transcriptomic data.</li> <li>Avoid negative values after batch correction.</li> <li>Keep the original data space after batch correction.</li> <li>Applicability to both scRNA-seq and SRT.</li> </ul>"},{"location":"#tested-environment","title":"Tested environment","text":"<ul> <li>CPU: Intel(R) Xeon(R) Platinum 8255C CPU @ 2.50GHz</li> <li>CPU Memory: 256 GB</li> <li>GPU: NVIDIA GeForce RTX 3090</li> <li>GPU Memory: 24 GB</li> <li>System: Ubuntu 20.04.5 LTS</li> <li>Python: 3.9.15</li> </ul>"},{"location":"#source-codes","title":"Source codes","text":"<p>All the source codes of ODBC-GAN are available on ODBC-GAN.</p>"},{"location":"#contributors","title":"Contributors","text":"<ul> <li>Kaichen Xu: lead developer, initial ODBC-GAN conception</li> <li>Kainan Liu: developer, diverse contributions</li> <li>Xiaobo Sun &amp; lab: enabling guidance, support and environment</li> </ul>"},{"location":"#citation","title":"Citation","text":"<p>Coming soon.</p>"},{"location":"API/Outlier/Detect_SC/","title":"og.detect.Detect_SC","text":"<p>Class</p> <p>og.detect.Detect_SC(n_epochs=400, learning_rate=3e-4, sample_rate=1, mem_dim=1024, update_size=64, shrink_thres=9e-3, temperature=1, n_critic=2, pretrain=True, GPU=True, verbose=True, log_interval=100, random_state=100, weight=None)</p> <p>Detect outlier cells as SC mode of ODBC-GAN.</p> <p><code>Detect_SC</code> has two important functions fit and predict. This class has been integrated in og.outlier_detect as SC mode.</p> <p>Parameters:</p> <ul> <li> <p>n_epochs: <code>int</code> (default: <code>400</code>)</p> <p>Number of train epochs.</p> </li> <li> <p>learning_rate: <code>float</code> (default: <code>3e-4</code>)</p> <p>Learning rate for Adam optim.</p> </li> <li> <p>sample_rate: <code>float</code> (default: <code>1</code>)</p> <p>Proportion of the actual train data to the input train data. Consider taking a smaller <code>sample_rare</code> when input train data is large-scale.</p> </li> <li> <p>mem_dim: <code>float</code> (default: <code>1024</code>)</p> <p>Number of embeddings stored in the memory bank. Larger <code>mem_dim</code> doesn't always mean better results, which means ODBC-GAN is insensitive to the size of memory bank.</p> </li> <li> <p>update_size: <code>int</code> (default: <code>64</code>)</p> <p>Number of embeddings updated in every epochs.</p> </li> <li> <p>shrink_thres: <code>float</code> (default: <code>9e-3</code>)</p> <p>Shrinkage threshold for attention score in the memory unit.</p> </li> <li> <p>temperature: <code>float</code> (default: <code>1</code>)</p> <p>Temperature hyperparameter for attention score in the memory unit.</p> </li> <li> <p>n_critic: <code>int</code> (default: <code>2</code>)</p> <p>Number of times the discriminator is updated in a epoch. Moreover, generator is only updated once in a epoch.</p> </li> <li> <p>pretrain: <code>bool</code> (default: <code>True</code>)</p> <p>If <code>True</code>, load pretrained weight for ODBC-GAN.</p> </li> <li> <p>GPU: <code>bool</code> (default: <code>True</code>)</p> <p>If <code>True</code>, run ODBC-GAN on GPU.</p> </li> <li> <p>verbose: <code>bool</code> (default: <code>True</code>)</p> <p>If <code>True</code>, print detailed information of every epochs.</p> </li> <li> <p>log_interval: <code>int</code> (default: <code>100</code>)</p> <p>Interval of epochs between two adjacent printed information.</p> </li> <li> <p>random_state: <code>int</code> (default: <code>100</code>)</p> <p>Random state to control all kinds of random seeds.</p> </li> <li> <p>weight: <code>Optional[dict]</code> (default: <code>None</code>)</p> <p>Weight for every part of loss. If <code>None</code>, <code>weight</code> should be set as <code>{'w_rec': 50, 'w_adv': 1, 'w_enc': 1, 'w_gp': 10}</code></p> </li> </ul> <p>Function of og.detect.Detect_SC</p> <p>fit(train)</p> <p>Learn information of normal cells on train data by full batch.</p> <p>Parameters:</p> <ul> <li> <p>train: <code>anndata.AnnData</code></p> <p>Train data of shape <code>n_obs</code> \u00d7 <code>n_vars</code>. Rows correspond to cells and columns to genes.</p> </li> </ul> <p>Function of og.detect.Detect_SC</p> <p>predict(test)</p> <p>Detect outlier cells on test data.</p> <p>Parameters:</p> <ul> <li> <p>test: <code>anndata.AnnData</code></p> <p>Test data of shape <code>n_obs</code> \u00d7 <code>n_vars</code>. Rows correspond to cells and columns to genes.</p> </li> </ul> <p>Returns:</p> <ul> <li> <p>result: <code>pandas.DataFrame</code></p> <p>Results of outlier detection. <code>result['cell_idx']</code> contains <code>test.obs_names</code>, and <code>result['score']</code> contains the anomaly scores of every observations. </p> </li> </ul> <p>Warning</p> <ul> <li>fit must be run before predict.</li> <li><code>train</code> and <code>test</code> should have the same genes.</li> </ul>"},{"location":"API/Outlier/outlier_detect/","title":"og.outlier_detect","text":"<p>Function</p> <p>og.outlier_detect(train, test, train_image=None, test_image=None, mode='SC', **kwargs)</p> <p>Detect outlier cells in SC mode, and outlier spots in SRT mode.</p> <p>Integrate two main classes og.detect.Detect_SC and og.detect.Detect_SRT to implement outlier detection.</p> <p>Hyperparameters (<code>n_epochs</code>, <code>learning_rate</code>, and etc.) are allowed for changing the default configuration. Detailed hyperparameter description can be see in og.detect.Detect_SC and og.detect.Detect_SRT</p> <p>Parameters:</p> <ul> <li> <p>train: <code>anndata.AnnData</code></p> <p>Train data of shape <code>n_obs</code> \u00d7 <code>n_vars</code>. Rows correspond to cells and columns to genes.</p> </li> <li> <p>test: <code>anndata.AnnData</code></p> <p>Test data of shape <code>n_obs</code> \u00d7 <code>n_vars</code>. Rows correspond to cells and columns to genes.</p> </li> <li> <p>train_image: <code>Optional[numpy.ndarray]</code> (default: <code>None</code>)</p> <p>H&amp;E image of train data. Required for SRT mode.</p> </li> <li> <p>test_image: <code>Optional[numpy.ndarray]</code> (default: <code>None</code>)</p> <p>H&amp;E image of test data. Required for SRT mode.</p> </li> <li> <p>mode: <code>Literal['SC', 'SRT']</code> (default: <code>'SC'</code>)</p> <p>Working mode of ODBC-GAN. </p> </li> </ul> <p>Returns:</p> <ul> <li> <p>result: <code>pandas.DataFrame</code></p> <p>Results of outlier detection. <code>result['cell_idx']</code> contains <code>test.obs_names</code>, and <code>result['score']</code> contains the anomaly scores of every observations. </p> </li> </ul> <p>Note</p> <p>When testing on different datasets, it's necessary to tune hyperparameters on the default configuration for better performance results.</p> <p>Warning</p> <ul> <li><code>train</code> and <code>test</code> should have the same genes.</li> <li>In SRT mode, <code>train_image</code> and <code>test_image</code> are required. And the position of every spots on image should contain in <code>train.obsm['spatial']</code> and <code>test.obsm['spatial']</code></li> </ul> <p>Example: <pre><code>import scanpy as sc\nimport ODBCGAN as og\ntrain = sc.read('train.h5ad')\ntest = sc.read('test.h5ad')\n# use default config\nog.outlier_detect(train, test, mode='SC')\n# tune hyperparameters\nog.outlier_detect(train, test, mode='SC', learning_rate=1e-4)\n</code></pre></p>"}]}